{"version":3,"sources":["../../src/services/cloudinary.js"],"names":["reqFile","currentEnv","process","env","NODE_ENV","file","name","path","__dirname","Promise","resolve","reject","mv","err","res","secure_url","cloudinary","v2","uploader","upload","folder","mimetype","use_filename","fs","unlink","uploadErr"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;;;eAGgBA,OAAD,IAAa;AAC1B,QAAMC,UAAU,GAAGC,OAAO,CAACC,GAAR,CAAYC,QAA/B;AACA,QAAMC,IAAI,GAAGL,OAAb,CAF0B,CAG1B;;AACAK,EAAAA,IAAI,CAACC,IAAL,GAAY,uBAAWD,IAAI,CAACC,IAAhB,CAAZ;AACA,QAAMC,IAAI,GAAI,GAAEC,SAAU,YAAWH,IAAI,CAACC,IAAK,EAA/C;AACA,SAAO,IAAIG,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACtC;AACAN,IAAAA,IAAI,CAACO,EAAL,CAAQL,IAAR,EAAeM,GAAD,IAAS;AACrB,UAAIA,GAAJ,EAAS,OAAOF,MAAM,CAACE,GAAD,CAAb;AACV,KAFD,EAFsC,CAKtC;;AACA,QAAI;AACF,YAAMC,GAAG,GAAGb,UAAU,KAAK,MAAf,GAAwB;AAAEc,QAAAA,UAAU,EAAE;AAAd,OAAxB,GAA4DC,mBAAWC,EAAX,CAAcC,QAAd,CAAuBC,MAAvB,CAA8BZ,IAA9B,EACtE;AACEa,QAAAA,MAAM,EAAG,aAAYf,IAAI,CAACgB,QAAS,EADrC;AAEEC,QAAAA,YAAY,EAAE;AAFhB,OADsE,CAAxE,CADE,CAMF;;AACAC,kBAAGC,MAAH,CAAUjB,IAAV,EAAiBM,GAAD,IAAS;AACvB,YAAIA,GAAJ,EAAS,OAAOF,MAAM,CAACE,GAAD,CAAb;AACV,OAFD;;AAGA,aAAOH,OAAO,CAACI,GAAD,CAAd;AACD,KAXD,CAWE,OAAOW,SAAP,EAAkB;AAClBd,MAAAA,MAAM,CAACc,SAAD,CAAN;AACD;AACF,GApBM,CAAP;AAqBD,C","sourcesContent":["import fs from 'fs';\nimport { cloudinary } from '../config';\nimport { renameFile } from '../utils';\n\n\nexport default (reqFile) => {\n  const currentEnv = process.env.NODE_ENV;\n  const file = reqFile;\n  // change file name to a unique one\n  file.name = renameFile(file.name);\n  const path = `${__dirname}/../temp/${file.name}`;\n  return new Promise((resolve, reject) => {\n    // temporary store file in server\n    file.mv(path, (err) => {\n      if (err) return reject(err);\n    });\n    // upload stored file to cloudinary\n    try {\n      const res = currentEnv === 'test' ? { secure_url: 'http://test.png' } : cloudinary.v2.uploader.upload(path,\n        {\n          folder: `/teamwork/${file.mimetype}`,\n          use_filename: true\n        });\n      // remove stored file and return upload result\n      fs.unlink(path, (err) => {\n        if (err) return reject(err);\n      });\n      return resolve(res);\n    } catch (uploadErr) {\n      reject(uploadErr);\n    }\n  });\n};\n"],"file":"cloudinary.js"}