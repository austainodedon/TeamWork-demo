{"version":3,"sources":["../../src/controllers/UserController.js"],"names":["UserController","registerUser","req","res","firstName","lastName","email","password","gender","jobRole","department","address","userRole","avaterUrl","body","result","error","createError","newUser","id","undefined","toLowerCase","Error","ignored","rest","token","userId","response","loginUser","user","userPassword","isPassValid","data","getUsers","users","noPasswords","map"],"mappings":"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","sourcesContent":["import uuid from 'uuid/v4';\nimport {\n  errorResponse, successResponse, hashPassword, generateToken, successResponsArray\n} from '../utils';\nimport { createItem, getItem, getItems } from '../database/query/helper';\nimport { comparePassword } from '../utils/bcrypt';\n\n/**\n * @class UserController\n * @description Controller to manage user actions\n * @exports UserController\n */\nexport default class UserController {\n  /**\n   * @method registerUser\n   * @description - method for admin/root to register a new user\n   * @param {object} req - request object\n   * @param {object} res - response object\n   * @return {object} request response body\n   */\n  static async registerUser(req, res) {\n    const {\n      firstName,\n      lastName,\n      email,\n      password,\n      gender,\n      jobRole,\n      department,\n      address,\n      userRole,\n      avaterUrl,\n    } = req.body;\n\n    // verify user dont already exist\n    try {\n      const { result } = await getItem('users', { email });\n      if (result) {\n        return errorResponse(res, 409, 'user already exist');\n      }\n      // remember to update id\n      const { error: createError, result: newUser } = await createItem('users', {\n        id: uuid(),\n        firstName,\n        lastName,\n        password: password ? hashPassword(password) : undefined,\n        email,\n        gender,\n        jobRole,\n        department,\n        address,\n        userRole: userRole ? userRole.toLowerCase() : 'employee',\n        avaterUrl: avaterUrl || 'none',\n      });\n      if (createError) {\n        throw new Error(createError);\n      }\n      const { password: ignored, ...rest } = newUser;\n      const token = await generateToken({ userId: rest.id, firstName, lastName });\n      const response = {\n        ...rest,\n        userId: rest.id,\n        token,\n      };\n      successResponse(res, 201, 'User account successfully created”', response);\n    } catch (error) {\n      return errorResponse(res, 500, 'Server error');\n    }\n  }\n\n  /**\n   * @method loginUser\n   * @description - method for users to login\n   * @param {object} req - request object\n   * @param {object} res - response object\n   * @return {object} request response body\n   */\n  static async loginUser(req, res) {\n    const { password, email } = req.body;\n    try {\n      const { result: user } = await getItem('users', { email });\n      if (user) {\n        const {\n          firstName, id, lastName, password: userPassword\n        } = user;\n        const isPassValid = comparePassword(userPassword, password);\n        if (!isPassValid) {\n          return errorResponse(res, 401, 'Authorzation fail');\n        }\n        const token = await generateToken({ userId: id, firstName, lastName });\n        const data = { token, userId: id };\n        return successResponse(res, 200, 'success', data);\n      }\n      return errorResponse(res, 401, 'Authorzation fail');\n    } catch (error) {\n      return errorResponse(res, 500, 'Server Error!');\n    }\n  }\n\n  /**\n * @method getUsers\n * @description - method for admin to get all users\n * @param {object} req - request object\n * @param {object} res - response object\n * @return {object} request response body\n */\n  static async getUsers(req, res) {\n    try {\n      const { error, result: users } = await getItems('users');\n      if (error) {\n        return errorResponse(res, 500, 'Internal server error');\n      }\n      const noPasswords = users.map((user) => {\n        delete user.password;\n        return user;\n      });\n      return successResponsArray(res, 200, noPasswords);\n    } catch (error) {\n      return errorResponse(res, 500, 'Server error');\n    }\n  }\n}\n"],"file":"UserController.js"}