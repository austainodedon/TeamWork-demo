{"version":3,"sources":["../../src/controllers/GifController.js"],"names":["GifController","createGif","req","res","title","share","body","userId","ownerId","firstName","lastName","user","files","image","secure_url","secureUrl","error","result","newGif","imageUrl","authorName","getGif","id","params","gif","commentArr","postId","response","comments","deleteGif","gifId","deleted","commentGif","comment","newComment","gifTitle","Error","console","log"],"mappings":"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","sourcesContent":["import { errorResponse, successResponse } from \"../utils\";\nimport { uploadCloudinary } from \"../services\";\nimport {\n  createItem,\n  deleteItem,\n  getItem,\n  getItems\n} from \"../database/query/helper\";\n\n/**\n * @class UserController\n * @description Controller to manage user actions\n * @exports GifController\n */\nexport default class GifController {\n  /**\n   * @method createGif\n   * @description - method for users to create gif\n   * @param {object} req - request object\n   * @param {object} res - response object\n   * @return {object} request response body\n   */\n  static async createGif(req, res) {\n    const { title, share } = req.body;\n    const { userId: ownerId, firstName, lastName } = req.user;\n\n    if (!req.files || !req.files.image) {\n      return errorResponse(res, 400, \"Please provide an image\");\n    }\n    const { image } = req.files;\n    try {\n      const { secure_url: secureUrl } = await uploadCloudinary(image);\n      const { error, result: newGif } = await createItem(\"gifs\", {\n        title,\n        ownerId,\n        share: share === \"false\" ? share : true,\n        imageUrl: secureUrl,\n        authorName: `${firstName} ${lastName}`\n      });\n      if (!error) {\n        return successResponse(res, 201, \"Gif created successfuly\", newGif);\n      }\n      return errorResponse(res, 500, \"Server error\");\n    } catch (error) {\n      return errorResponse(res, 500, \"Internal server error\");\n    }\n  }\n\n  /**\n   * @method getgif\n   * @description - method to get all articles\n   * @param {object} req - request object\n   * @param {object} res - response object\n   * @return {object} request response body\n   */\n  static async getGif(req, res) {\n    try {\n      const { id } = req.params;\n      const { error, result: gif } = await getItem(\"gifs\", { id });\n      const { result: commentArr } = await getItems(\"comments\", { postId: id });\n      if (!error) {\n        const response = { ...gif, comments: commentArr };\n        return successResponse(res, 200, \"Gif posts\", response);\n      }\n      return errorResponse(res, 500, \"Server error geting items\");\n    } catch (error) {\n      return errorResponse(res, 500, \"Server error\");\n    }\n  }\n\n  /**\n   * @method deleteGif\n   * @description - method for users to delete an existing gif\n   * @param {object} req - request object\n   * @param {object} res - response object\n   * @return {object} request response body\n   */\n  static async deleteGif(req, res) {\n    try {\n      const { userId } = req.user;\n      const { id: gifId } = req.params;\n      const { result: gif } = await getItem(\"gifs\", { id: gifId });\n      if (!gif) return errorResponse(res, 404, \"Gif not found\");\n      if (gif.ownerId !== userId) {\n        return errorResponse(res, 403, \"Not allowed\");\n      }\n      const { result: deleted } = await deleteItem(\"gifs\", gifId);\n      if (deleted)\n        return successResponse(res, 200, \"gif post successfully deleted\");\n      return errorResponse(res, 500, \"Server error deleting article\");\n    } catch (error) {\n      return errorResponse(res, 500, \"internal server error\");\n    }\n  }\n\n  /**\n   * @method commentArticle\n   * @description - method for users to comment on a gif\n   * @param {object} req - request object\n   * @param {object} res - response object\n   * @return {object} request response body\n   */\n  static async commentGif(req, res) {\n    const { userId: ownerId, firstName, lastName } = req.user;\n    try {\n      const { id: gifId } = req.params;\n      const { comment } = req.body;\n      const { result: gif } = await getItem(\"gifs\", { id: gifId });\n      if (!gif) {\n        return errorResponse(res, 404, \"No article found\");\n      }\n      const { error, result: newComment } = await createItem(\"comments\", {\n        comment,\n        ownerId,\n        authorName: `${firstName} ${lastName}`,\n        postId: gifId\n      });\n      const response = {\n        ...newComment,\n        gifTitle: gif.title\n      };\n      if (!error) {\n        return successResponse(\n          res,\n          201,\n          \"Comment successfully created‚Äù\",\n          response\n        );\n      }\n      throw new Error(error);\n    } catch (error) {\n      console.log(error);\n      return errorResponse(res, 500, \"internal server error\");\n    }\n  }\n}\n"],"file":"GifController.js"}