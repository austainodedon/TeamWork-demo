{"version":3,"sources":["../../../src/test/controllers/gifController.test.js"],"names":["chai","use","chaiHttp","sinonChai","expect","deleteGif","createGif","commentGif","GifController","gifRoute","signinRoute","bearerToken","gifId","describe","it","done","dummyGif","title","user","email","password","request","server","post","send","end","_","res","token","body","data","set","err","gifRes","Error","to","have","status","property","error","eq","field","attach","fs","readFileSync","path","resolve","id","payload","comment","route","arRes","noExisitngId","get","delete","dontExist","req","json","sinon","stub","returnsThis","been","calledWith","userId","files","image"],"mappings":"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","sourcesContent":["import chai from 'chai';\nimport chaiHttp from 'chai-http';\nimport fs from 'fs';\nimport path from 'path';\nimport sinon from 'sinon';\nimport sinonChai from 'sinon-chai';\nimport server from '../../server';\nimport GifController from '../../controllers/GifController';\n\nchai.use(chaiHttp);\nchai.use(sinonChai);\nconst { expect } = chai;\n\nconst { deleteGif, createGif, commentGif } = GifController;\n\nconst gifRoute = '/api/v1/gifs';\nconst signinRoute = '/api/v1/auth/signin';\nlet bearerToken;\nlet gifId;\ndescribe('Gif test suite', () => {\n  describe('create gif', () => {\n    it('Should check for gif file', (done) => {\n      const dummyGif = {\n        title: 'Testing my gifs',\n      };\n      const user = {\n        email: 'oliver4@gmail.com',\n        password: 'password'\n      };\n      chai.request(server).post(signinRoute).send(user).end((_, res) => {\n        const { token } = res.body.data;\n        bearerToken = `Bearer ${token}`;\n        chai.request(server).post(gifRoute).set('Authorization', bearerToken).send(dummyGif)\n          .end((err, gifRes) => {\n            if (err) throw Error('Error making request');\n            expect(gifRes).to.have.status(400);\n            expect(gifRes.body).to.have.property('error');\n            expect(gifRes.body.error).to.eq('Please provide an image');\n            done();\n          });\n      });\n    });\n    it('Should upload gif', (done) => {\n      chai.request(server).post(gifRoute).set('Authorization', bearerToken)\n        .field('title', 'Testing my gifs')\n        .attach('image', fs.readFileSync(path.resolve('./src/test/assets/gif1.gif')), 'gif1.gif')\n        .end((err, gifRes) => {\n          if (err) throw Error('Error making request');\n          gifId = gifRes.body.data.id;\n          expect(gifRes).to.have.status(201);\n          expect(gifRes.body).to.have.property('data');\n          done();\n        });\n    });\n    describe('write comment for an gif', () => {\n      it('should add comment', (done) => {\n        const payload = { comment: 'hello i love your post' };\n        const route = `${gifRoute}/${gifId}/comment`;\n        chai.request(server).post(route).set('Authorization', bearerToken)\n          .send(payload)\n          .end((err, arRes) => {\n            if (err) throw Error('Error making request');\n            expect(arRes).to.have.status(201);\n            expect(arRes.body).to.have.property('data');\n            done();\n          });\n      });\n      it('should not add comment for non existing postId', (done) => {\n        const noExisitngId = '0a598563-5a38-4f8d-9cb7-482103559ad98';\n        const route = `${gifRoute}/${noExisitngId}/comment`;\n        const payload = { comment: 'hello i love your post' };\n        chai.request(server).post(route).set('Authorization', bearerToken)\n          .send(payload)\n          .end((err, arRes) => {\n            if (err) throw Error('Error making request');\n            expect(arRes).to.have.status(404);\n            expect(arRes.body).to.have.property('error');\n            done();\n          });\n      });\n    });\n  });\n  describe('get all posts', () => {\n    it('should get feeds', (done) => {\n      const route = '/api/v1/feed';\n      chai.request(server).get(route).set('Authorization', bearerToken)\n        .end((err, arRes) => {\n          if (err) throw Error('Error making request');\n          expect(arRes).to.have.status(200);\n          expect(arRes.body).to.have.property('data');\n          done();\n        });\n    });\n    it('should specific articles', (done) => {\n      const route = `${gifRoute}/${gifId}`;\n      chai.request(server).get(route).set('Authorization', bearerToken).end((err, res) => {\n        expect(res).to.have.status(200);\n        expect(res.body).to.have.property('data');\n        done();\n      });\n    });\n  });\n  describe('delete gif', () => {\n    it('should delete gif', (done) => {\n      chai.request(server).delete(`${gifRoute}/${gifId}`).set('Authorization', bearerToken)\n        .end((err, gifRes) => {\n          if (err) throw Error('Error making request');\n          expect(gifRes).to.have.status(200);\n          done();\n        });\n    });\n    it('send not found for none existing gif', (done) => {\n      const dontExist = '012-20394-2039';\n      chai.request(server).delete(`${gifRoute}/${dontExist}`).set('Authorization', bearerToken)\n        .end((err, gifRes) => {\n          if (err) throw Error('Error making request');\n          expect(gifRes).to.have.status(404);\n          done();\n        });\n    });\n    it('Should handle error for deleteArticle', async () => {\n      const req = {};\n      const res = {\n        status: () => { },\n        json: () => { },\n      };\n      sinon.stub(res, 'status').returnsThis();\n      await deleteGif(req, res);\n      expect(res.status).to.have.been.calledWith(500);\n    });\n    it('Controller should catch invalid request', async () => {\n      const req = {\n        user: { userId: '11111' },\n        body: {\n          title: 'some title',\n        },\n        files: { image: 'none' }\n      };\n      const res = {\n        status: () => { },\n        json: () => { },\n      };\n      sinon.stub(res, 'status').returnsThis();\n      await createGif(req, res);\n      expect(res.status).to.have.been.calledWith(500);\n    });\n\n    it('commentGif should catch invalid request', async () => {\n      const req = {\n        user: { userId: '11111' },\n      };\n      const res = {\n        status: () => { },\n        json: () => { },\n      };\n      sinon.stub(res, 'status').returnsThis();\n      await commentGif(req, res);\n      expect(res.status).to.have.been.calledWith(500);\n    });\n  });\n});\n"],"file":"gifController.test.js"}