{"version":3,"sources":["../../src/database/index.js"],"names":["require","config","pg","Pool","Client","conString","process","env","DB_URL","client","connect","err","console","error","query","result","log","module","exports"],"mappings":";;AAAAA,OAAO,CAAC,QAAD,CAAP,CAAkBC,MAAlB;;AACA,IAAIC,EAAE,GAAGF,OAAO,CAAC,IAAD,CAAhB;;AACA,MAAM;AAAEG,EAAAA,IAAF;AAAQC,EAAAA;AAAR,IAAmBJ,OAAO,CAAC,IAAD,CAAhC;;AAEA,IAAIK,SAAS,GAAGC,OAAO,CAACC,GAAR,CAAYC,MAA5B;AACA,IAAIC,MAAM,GAAG,IAAIP,EAAE,CAACE,MAAP,CAAcC,SAAd,CAAb;AACAI,MAAM,CAACC,OAAP,CAAe,UAASC,GAAT,EAAc;AAC3B,MAAIA,GAAJ,EAAS;AACP,WAAOC,OAAO,CAACC,KAAR,CAAc,+BAAd,EAA+CF,GAA/C,CAAP;AACD;;AACDF,EAAAA,MAAM,CAACK,KAAP,CAAa,2BAAb,EAA0C,UAASH,GAAT,EAAcI,MAAd,EAAsB;AAC9D,QAAIJ,GAAJ,EAAS;AACP,aAAOC,OAAO,CAACC,KAAR,CAAc,qBAAd,EAAqCF,GAArC,CAAP;AACD;;AACDC,IAAAA,OAAO,CAACI,GAAR,CAAY,oBAAZ;AACD,GALD;AAMD,CAVD;AAYAC,MAAM,CAACC,OAAP,GAAiBT,MAAjB;AAEA","sourcesContent":["require(\"dotenv\").config();\nvar pg = require(\"pg\");\nconst { Pool, Client } = require(\"pg\");\n\nvar conString = process.env.DB_URL;\nvar client = new pg.Client(conString);\nclient.connect(function(err) {\n  if (err) {\n    return console.error(\"could not connect to postgres\", err);\n  }\n  client.query('SELECT NOW() AS \"theTime\"', function(err, result) {\n    if (err) {\n      return console.error(\"error running query\", err);\n    }\n    console.log(\"Database Connected\");\n  });\n});\n\nmodule.exports = client;\n\n/* import { Pool } from 'pg';\nimport 'dotenv/config';\n\nlet pool;\nif (process.env.NODE_ENV === 'production') {\n\t// On production server using heroku db connection string\n\tpool = new Pool({ connectionString: process.env.DATABASE_URL });\n} else if (process.env.NODE_ENV === 'test') {\n\tpool = new Pool({ connectionString: process.env.TEST_DATABASE_URL });\n} else {\n\t// created a Pool using local env default config on local\n\tpool = new Pool({ connectionString: process.env.DEV_DATABASE_URL });\n}\n\nexport default {\n\tquery: async (text, params) => {\n\t\tconst client = await pool.connect();\n\t\ttry {\n\t\t\tconst res = await client.query(text, params);\n\t\t\treturn res;\n\t\t} finally {\n\t\t\tclient.release();\n\t\t}\n\t},\n\tclearDb: async () => {\n\t\tconst client = await pool.connect();\n\t\tawait client.query('DROP TABLE IF EXISTS users, gifs, articles CASCADE');\n\t}\n};\n*/\n"],"file":"index.js"}