{"version":3,"sources":["../../src/middlewares/authenticate.js"],"names":["Authenticate","verifyToken","req","res","next","headers","authorization","undefined","Error","token","split","decoded","userId","user","error","message","verifyAdmin","ignored","result","foundUser","id","userRole","console","log","verifyRootUser","secret","body","storedSecret","process","env","ROOT_SECRET"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;;;;AAKA,MAAMA,YAAN,CAAmB;AACjB;;;;;;;AAOA,eAAaC,WAAb,CAAyBC,GAAzB,EAA8BC,GAA9B,EAAmCC,IAAnC,EAAyC;AACvC,QAAI;AACF,YAAM;AAAEC,QAAAA,OAAO,EAAE;AAAEC,UAAAA;AAAF;AAAX,UAAiCJ,GAAvC;AACA,UAAII,aAAa,KAAKC,SAAtB,EAAiC,MAAM,IAAIC,KAAJ,CAAU,SAAV,CAAN;AACjC,YAAMC,KAAK,GAAGH,aAAa,CAACI,KAAd,CAAoB,GAApB,EAAyB,CAAzB,CAAd;;AACA,UAAI,CAACD,KAAD,IAAUA,KAAK,KAAK,EAAxB,EAA4B;AAC1B,eAAO,0BAAcN,GAAd,EAAmB,GAAnB,EAAwB,eAAxB,CAAP;AACD;;AACD,YAAMQ,OAAO,GAAG,MAAM,wBAAYF,KAAZ,CAAtB;;AACA,UAAI,EAAEE,OAAO,IAAIA,OAAO,CAACC,MAArB,CAAJ,EAAkC;AAChC,eAAO,0BAAcT,GAAd,EAAmB,GAAnB,EAAwB,yCAAxB,CAAP;AACD;;AACDD,MAAAA,GAAG,CAACW,IAAJ,GAAWF,OAAX;AACA,aAAOP,IAAI,EAAX;AACD,KAbD,CAaE,OAAOU,KAAP,EAAc;AACd,UAAIA,KAAK,CAACC,OAAN,KAAkB,SAAlB,IAA+BD,KAAK,CAACC,OAAN,KAAkB,aAArD,EAAoE;AAClE,eAAO,0BAAcZ,GAAd,EAAmB,GAAnB,EAAwB,sBAAxB,CAAP;AACD;;AACD,aAAO,0BAAcA,GAAd,EAAmB,GAAnB,EAAwB,cAAxB,CAAP;AACD;AACF;AAED;;;;;;;;;AAOA,eAAaa,WAAb,CAAyBd,GAAzB,EAA8BC,GAA9B,EAAmCC,IAAnC,EAAyC;AACvC,UAAM;AAAES,MAAAA;AAAF,QAAWX,GAAjB;;AACA,QAAI;AACF,YAAM;AAAEY,QAAAA,KAAK,EAAEG,OAAT;AAAkBC,QAAAA,MAAM,EAAEC;AAA1B,UAAwC,MAAM,qBAAQ,OAAR,EAAiB;AAAEC,QAAAA,EAAE,EAAEP,IAAI,CAACD;AAAX,OAAjB,CAApD;;AACA,UAAIO,SAAS,CAACE,QAAV,KAAuB,OAA3B,EAAoC;AAClC,eAAOjB,IAAI,EAAX;AACD;;AACD,aAAO,0BAAcD,GAAd,EAAmB,GAAnB,EAAwB,4BAAxB,CAAP;AACD,KAND,CAME,OAAOW,KAAP,EAAc;AACdQ,MAAAA,OAAO,CAACC,GAAR,CAAYT,KAAZ;AACA,aAAO,0BAAcX,GAAd,EAAmB,GAAnB,EAAwB,kCAAxB,CAAP;AACD;AACF;AAED;;;;;;;;;AAOA,eAAaqB,cAAb,CAA4BtB,GAA5B,EAAiCC,GAAjC,EAAsCC,IAAtC,EAA4C;AAC1C,UAAM;AAAEqB,MAAAA;AAAF,QAAavB,GAAG,CAACwB,IAAvB;AACA,UAAMC,YAAY,GAAGC,OAAO,CAACC,GAAR,CAAYC,WAAjC;;AACA,QAAIL,MAAM,KAAKE,YAAf,EAA6B;AAC3BzB,MAAAA,GAAG,CAACwB,IAAJ,CAASL,QAAT,GAAoB,OAApB;AACA,aAAOjB,IAAI,EAAX;AACD;;AACD,WAAO,0BAAcD,GAAd,EAAmB,GAAnB,EAAwB,aAAxB,CAAP;AACD;;AAlEgB;;eAqEJH,Y","sourcesContent":["import { verifyToken, errorResponse } from '../utils';\nimport { getItem } from '../database/query/helper';\n/**\n * @class Authenticate\n * @description authenticate tokens and roles\n * @exports Authenticate\n */\nclass Authenticate {\n  /**\n   * Verify if token is valid\n   * @param  {object} req - The user request object\n   * @param  {object} res - The user res response object\n   * @param  {function} next - The next() Function\n   * @returns {String} req.userId - The user id\n   */\n  static async verifyToken(req, res, next) {\n    try {\n      const { headers: { authorization } } = req;\n      if (authorization === undefined) throw new Error('no auth');\n      const token = authorization.split(' ')[1];\n      if (!token || token === '') {\n        return errorResponse(res, 401, 'Access denied');\n      }\n      const decoded = await verifyToken(token);\n      if (!(decoded && decoded.userId)) {\n        return errorResponse(res, 401, 'Access denied. We could not verify user');\n      }\n      req.user = decoded;\n      return next();\n    } catch (error) {\n      if (error.message === 'no auth' || error.message === 'jwt expired') {\n        return errorResponse(res, 401, 'Authorization failed');\n      }\n      return errorResponse(res, 500, 'Server error');\n    }\n  }\n\n  /**\n* Verifies a user is admin\n* @param  {object} req - The user request object\n* @param  {object} res - The user res response object\n* @param  {function} next - The next() Function\n* @returns {String} next() if user is admin and error if user is not\n*/\n  static async verifyAdmin(req, res, next) {\n    const { user } = req;\n    try {\n      const { error: ignored, result: foundUser } = await getItem('users', { id: user.userId });\n      if (foundUser.userRole === 'admin') {\n        return next();\n      }\n      return errorResponse(res, 401, 'Access denied, only admins');\n    } catch (error) {\n      console.log(error);\n      return errorResponse(res, 500, 'Server error Authenticating user');\n    }\n  }\n\n  /**\n  * Verifies a valid root user\n  * @param  {object} req - The user request object\n  * @param  {object} res - The user res response object\n  * @param  {function} next - The next() Function\n  * @returns {String} next() if valid secret\n  */\n  static async verifyRootUser(req, res, next) {\n    const { secret } = req.body;\n    const storedSecret = process.env.ROOT_SECRET;\n    if (secret === storedSecret) {\n      req.body.userRole = 'admin';\n      return next();\n    }\n    return errorResponse(res, 403, 'Not allowed');\n  }\n}\n\nexport default Authenticate;\n"],"file":"authenticate.js"}